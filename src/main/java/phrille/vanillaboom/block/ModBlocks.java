/*
 * Copyright (C) 2023-2025 Phrille
 *
 * This file is part of the Vanilla Boom Mod.
 * Unauthorized distribution or modification is prohibited.
 * See LICENSE for details.
 */

package phrille.vanillaboom.block;

import net.minecraft.sounds.SoundEvents;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.item.DyeColor;
import net.minecraft.world.level.block.*;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.Material;
import net.minecraft.world.level.material.MaterialColor;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;
import phrille.vanillaboom.VanillaBoom;
import phrille.vanillaboom.block.crop.*;

public class ModBlocks {

    public static final DeferredRegister<Block> BLOCKS = DeferredRegister.create(ForgeRegistries.BLOCKS, VanillaBoom.MOD_ID);

    // Bricks
    public static final RegistryObject<Block> COBBLESTONE_BRICKS = BLOCKS.register("cobblestone_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_BRICKS = BLOCKS.register("mossy_cobblestone_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.MOSSY_COBBLESTONE)));
    public static final RegistryObject<Block> MAGMA_BRICKS = BLOCKS.register("magma_bricks", () -> new MagmaBlock(BlockBehaviour.Properties.copy(Blocks.MAGMA_BLOCK).sound(SoundType.NETHER_BRICKS)));
    public static final RegistryObject<Block> OBSIDIAN_BRICKS = BLOCKS.register("obsidian_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
    public static final RegistryObject<Block> SNOW_BRICKS = BLOCKS.register("snow_bricks", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.SNOW).strength(1.5F).sound(SoundType.SNOW)));
    public static final RegistryObject<Block> TERRACOTTA_BRICKS = BLOCKS.register("terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_BRICKS = BLOCKS.register("white_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_BRICKS = BLOCKS.register("orange_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_BRICKS = BLOCKS.register("magenta_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_BRICKS = BLOCKS.register("light_blue_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_BRICKS = BLOCKS.register("yellow_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
    public static final RegistryObject<Block> LIME_TERRACOTTA_BRICKS = BLOCKS.register("lime_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
    public static final RegistryObject<Block> PINK_TERRACOTTA_BRICKS = BLOCKS.register("pink_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_BRICKS = BLOCKS.register("gray_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_BRICKS = BLOCKS.register("light_gray_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_BRICKS = BLOCKS.register("cyan_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_BRICKS = BLOCKS.register("purple_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_BRICKS = BLOCKS.register("blue_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_BRICKS = BLOCKS.register("brown_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_BRICKS = BLOCKS.register("green_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
    public static final RegistryObject<Block> RED_TERRACOTTA_BRICKS = BLOCKS.register("red_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_BRICKS = BLOCKS.register("black_terracotta_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));

    // Rocks
    public static final RegistryObject<Block> PERIDOTITE = BLOCKS.register("peridotite", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> HYDRO_ROCK = BLOCKS.register("hydro_rock", HydroRockBlock::new);
    public static final RegistryObject<Block> INFERNAL_ROCK = BLOCKS.register("infernal_rock", InfernalRockBlock::new);

    // Sand and Gravel
    public static final RegistryObject<Block> BONE_SAND = BLOCKS.register("bone_sand", () -> new FallingBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.SNOW).strength(0.5F).sound(SoundType.SOUL_SAND)));
    public static final RegistryObject<Block> WITHER_BONE_SAND = BLOCKS.register("wither_bone_sand", () -> new FallingBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_BLACK).strength(0.5F).sound(SoundType.SOUL_SAND)));

    // Polished
    public static final RegistryObject<Block> POLISHED_PERIDOTITE = BLOCKS.register("polished_peridotite", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> POLISHED_PRISMARINE = BLOCKS.register("polished_prismarine", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_DARK_PRISMARINE = BLOCKS.register("polished_dark_prismarine", () -> new Block(BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_END_STONE = BLOCKS.register("polished_end_stone", () -> new Block(BlockBehaviour.Properties.copy(Blocks.END_STONE)));
    public static final RegistryObject<Block> POLISHED_NETHERRACK = BLOCKS.register("polished_netherrack", () -> new Block(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));

    // Chiseled and cracked
    public static final RegistryObject<Block> CRACKED_RED_NETHER_BRICKS = BLOCKS.register("cracked_red_nether_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_RED_NETHER_BRICKS = BLOCKS.register("chiseled_red_nether_bricks", () -> new Block(BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_PURPUR_BLOCK = BLOCKS.register("chiseled_purpur_block", () -> new Block(BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> CHISELED_OBSIDIAN = BLOCKS.register("chiseled_obsidian", () -> new Block(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));

    // Pillars
    public static final RegistryObject<Block> GRANITE_PILLAR = BLOCKS.register("granite_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_GRANITE)));
    public static final RegistryObject<Block> DIORITE_PILLAR = BLOCKS.register("diorite_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_DIORITE)));
    public static final RegistryObject<Block> ANDESITE_PILLAR = BLOCKS.register("andesite_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.POLISHED_ANDESITE)));
    public static final RegistryObject<Block> PERIDOTITE_PILLAR = BLOCKS.register("peridotite_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> PRISMARINE_PILLAR = BLOCKS.register("prismarine_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> DARK_PRISMARINE_PILLAR = BLOCKS.register("dark_prismarine_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> END_STONE_PILLAR = BLOCKS.register("end_stone_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.END_STONE)));
    public static final RegistryObject<Block> NETHERRACK_PILLAR = BLOCKS.register("netherrack_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> RED_NETHER_PILLAR = BLOCKS.register("red_nether_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> OBSIDIAN_PILLAR = BLOCKS.register("obsidian_pillar", () -> new RotatedPillarBlock(BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));

    // Wood Variations
    public static final RegistryObject<Block> SPRUCE_BOOKSHELF = BLOCKS.register("spruce_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_PLANKS)));
    public static final RegistryObject<Block> BIRCH_BOOKSHELF = BLOCKS.register("birch_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_PLANKS)));
    public static final RegistryObject<Block> JUNGLE_BOOKSHELF = BLOCKS.register("jungle_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_PLANKS)));
    public static final RegistryObject<Block> ACACIA_BOOKSHELF = BLOCKS.register("acacia_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_PLANKS)));
    public static final RegistryObject<Block> DARK_OAK_BOOKSHELF = BLOCKS.register("dark_oak_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_PLANKS)));
    public static final RegistryObject<Block> CRIMSON_BOOKSHELF = BLOCKS.register("crimson_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_PLANKS)));
    public static final RegistryObject<Block> WARPED_BOOKSHELF = BLOCKS.register("warped_bookshelf", () -> new BookshelfBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_PLANKS)));
    public static final RegistryObject<Block> SPRUCE_LADDER = BLOCKS.register("spruce_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));
    public static final RegistryObject<Block> BIRCH_LADDER = BLOCKS.register("birch_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));
    public static final RegistryObject<Block> JUNGLE_LADDER = BLOCKS.register("jungle_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));
    public static final RegistryObject<Block> ACACIA_LADDER = BLOCKS.register("acacia_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));
    public static final RegistryObject<Block> DARK_OAK_LADDER = BLOCKS.register("dark_oak_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));
    public static final RegistryObject<Block> CRIMSON_LADDER = BLOCKS.register("crimson_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));
    public static final RegistryObject<Block> WARPED_LADDER = BLOCKS.register("warped_ladder", () -> new LadderBlock(BlockBehaviour.Properties.copy(Blocks.LADDER)));

    // Storage
    public static final RegistryObject<Block> CHARCOAL_BLOCK = BLOCKS.register("charcoal_block", () -> new Block(BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
    public static final RegistryObject<Block> SUGAR_BLOCK = BLOCKS.register("sugar_block", () -> new FallingBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.SNOW).strength(0.5F).sound(SoundType.SAND)));
    public static final RegistryObject<Block> SUGAR_CANE_BLOCK = BLOCKS.register("sugar_cane_block", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.PLANT, MaterialColor.GRASS).strength(0.5F).sound(SoundType.GRASS)));
    public static final RegistryObject<Block> GUNPOWDER_BLOCK = BLOCKS.register("gunpowder_block", GunpowderBlock::new);
    public static final RegistryObject<Block> BLAZE_POWDER_BLOCK = BLOCKS.register("blaze_powder_block", () -> new FallingBlock(BlockBehaviour.Properties.of(Material.SAND, MaterialColor.COLOR_ORANGE).strength(0.5F).sound(SoundType.SNOW)));
    public static final RegistryObject<Block> MAGMA_CREAM_BLOCK = BLOCKS.register("magma_cream_block", () -> new SlimeBlock(BlockBehaviour.Properties.copy(Blocks.SLIME_BLOCK)));
    public static final RegistryObject<Block> PRISMARINE_CRYSTAL_BLOCK = BLOCKS.register("prismarine_crystal_block", () -> new Block(BlockBehaviour.Properties.of(Material.GLASS, MaterialColor.COLOR_CYAN).strength(0.3F, 0.5F).sound(SoundType.GLASS).lightLevel((lightValue) -> 5)));
    public static final RegistryObject<Block> WITHER_BONE_BLOCK = BLOCKS.register("wither_bone_block", () -> new RotatedPillarBlock(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).sound(SoundType.BONE_BLOCK).strength(1.8F, 3.33F)));
    public static final RegistryObject<Block> WHITE_DYE_BLOCK = BLOCKS.register("white_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.WOOL).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> ORANGE_DYE_BLOCK = BLOCKS.register("orange_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_ORANGE).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> MAGENTA_DYE_BLOCK = BLOCKS.register("magenta_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_MAGENTA).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> LIGHT_BLUE_DYE_BLOCK = BLOCKS.register("light_blue_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_BLUE).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> YELLOW_DYE_BLOCK = BLOCKS.register("yellow_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_YELLOW).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> LIME_DYE_BLOCK = BLOCKS.register("lime_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_GREEN).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> PINK_DYE_BLOCK = BLOCKS.register("pink_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_PINK).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> GRAY_DYE_BLOCK = BLOCKS.register("gray_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GRAY).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> LIGHT_GRAY_DYE_BLOCK = BLOCKS.register("light_gray_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_LIGHT_GRAY).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> CYAN_DYE_BLOCK = BLOCKS.register("cyan_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_CYAN).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> PURPLE_DYE_BLOCK = BLOCKS.register("purple_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_PURPLE).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> BLUE_DYE_BLOCK = BLOCKS.register("blue_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLUE).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> BROWN_DYE_BLOCK = BLOCKS.register("brown_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BROWN).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> GREEN_DYE_BLOCK = BLOCKS.register("green_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_GREEN).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> RED_DYE_BLOCK = BLOCKS.register("red_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_RED).strength(3.0F, 5.0F)));
    public static final RegistryObject<Block> BLACK_DYE_BLOCK = BLOCKS.register("black_dye_block", () -> new Block(BlockBehaviour.Properties.of(Material.STONE, MaterialColor.COLOR_BLACK).strength(3.0F, 5.0F)));

    // Glass
    public static final RegistryObject<Block> SOUL_GLASS = BLOCKS.register("soul_glass", () -> new StainedGlassBlock(DyeColor.WHITE, BlockBehaviour.Properties.copy(Blocks.GLASS)));
    public static final RegistryObject<Block> WHITE_STAINED_SOUL_GLASS = BLOCKS.register("white_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.WHITE, BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS)));
    public static final RegistryObject<Block> ORANGE_STAINED_SOUL_GLASS = BLOCKS.register("orange_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.WHITE, BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS)));
    public static final RegistryObject<Block> MAGENTA_STAINED_SOUL_GLASS = BLOCKS.register("magenta_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS)));
    public static final RegistryObject<Block> LIGHT_BLUE_STAINED_SOUL_GLASS = BLOCKS.register("light_blue_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS)));
    public static final RegistryObject<Block> YELLOW_STAINED_SOUL_GLASS = BLOCKS.register("yellow_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.YELLOW, BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS)));
    public static final RegistryObject<Block> LIME_STAINED_SOUL_GLASS = BLOCKS.register("lime_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.LIME, BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS)));
    public static final RegistryObject<Block> PINK_STAINED_SOUL_GLASS = BLOCKS.register("pink_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.PINK, BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS)));
    public static final RegistryObject<Block> GRAY_STAINED_SOUL_GLASS = BLOCKS.register("gray_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.GRAY, BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS)));
    public static final RegistryObject<Block> LIGHT_GRAY_STAINED_SOUL_GLASS = BLOCKS.register("light_gray_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS)));
    public static final RegistryObject<Block> CYAN_STAINED_SOUL_GLASS = BLOCKS.register("cyan_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.CYAN, BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS)));
    public static final RegistryObject<Block> PURPLE_STAINED_SOUL_GLASS = BLOCKS.register("purple_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.PURPLE, BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS)));
    public static final RegistryObject<Block> BLUE_STAINED_SOUL_GLASS = BLOCKS.register("blue_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.BLUE, BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> BROWN_STAINED_SOUL_GLASS = BLOCKS.register("brown_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.BROWN, BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS)));
    public static final RegistryObject<Block> GREEN_STAINED_SOUL_GLASS = BLOCKS.register("green_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.GREEN, BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS)));
    public static final RegistryObject<Block> RED_STAINED_SOUL_GLASS = BLOCKS.register("red_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.RED, BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS)));
    public static final RegistryObject<Block> BLACK_STAINED_SOUL_GLASS = BLOCKS.register("black_stained_soul_glass", () -> new StainedGlassBlock(DyeColor.BLACK, BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS)));
    public static final RegistryObject<Block> SOUL_GLASS_PANE = BLOCKS.register("soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.WHITE, BlockBehaviour.Properties.copy(Blocks.GLASS_PANE)));
    public static final RegistryObject<Block> WHITE_STAINED_SOUL_GLASS_PANE = BLOCKS.register("white_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.WHITE, BlockBehaviour.Properties.copy(Blocks.WHITE_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> ORANGE_STAINED_SOUL_GLASS_PANE = BLOCKS.register("orange_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.WHITE, BlockBehaviour.Properties.copy(Blocks.ORANGE_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> MAGENTA_STAINED_SOUL_GLASS_PANE = BLOCKS.register("magenta_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.MAGENTA, BlockBehaviour.Properties.copy(Blocks.MAGENTA_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> LIGHT_BLUE_STAINED_SOUL_GLASS_PANE = BLOCKS.register("light_blue_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.LIGHT_BLUE, BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> YELLOW_STAINED_SOUL_GLASS_PANE = BLOCKS.register("yellow_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.YELLOW, BlockBehaviour.Properties.copy(Blocks.YELLOW_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> LIME_STAINED_SOUL_GLASS_PANE = BLOCKS.register("lime_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.LIME, BlockBehaviour.Properties.copy(Blocks.LIME_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> PINK_STAINED_SOUL_GLASS_PANE = BLOCKS.register("pink_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.PINK, BlockBehaviour.Properties.copy(Blocks.PINK_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> GRAY_STAINED_SOUL_GLASS_PANE = BLOCKS.register("gray_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.GRAY, BlockBehaviour.Properties.copy(Blocks.GRAY_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> LIGHT_GRAY_STAINED_SOUL_GLASS_PANE = BLOCKS.register("light_gray_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.LIGHT_GRAY, BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> CYAN_STAINED_SOUL_GLASS_PANE = BLOCKS.register("cyan_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.CYAN, BlockBehaviour.Properties.copy(Blocks.CYAN_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> PURPLE_STAINED_SOUL_GLASS_PANE = BLOCKS.register("purple_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.PURPLE, BlockBehaviour.Properties.copy(Blocks.PURPLE_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> BLUE_STAINED_SOUL_GLASS_PANE = BLOCKS.register("blue_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.BLUE, BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> BROWN_STAINED_SOUL_GLASS_PANE = BLOCKS.register("brown_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.BROWN, BlockBehaviour.Properties.copy(Blocks.BROWN_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> GREEN_STAINED_SOUL_GLASS_PANE = BLOCKS.register("green_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.GREEN, BlockBehaviour.Properties.copy(Blocks.GREEN_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> RED_STAINED_SOUL_GLASS_PANE = BLOCKS.register("red_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.RED, BlockBehaviour.Properties.copy(Blocks.RED_STAINED_GLASS_PANE)));
    public static final RegistryObject<Block> BLACK_STAINED_SOUL_GLASS_PANE = BLOCKS.register("black_stained_soul_glass_pane", () -> new StainedGlassPaneBlock(DyeColor.BLACK, BlockBehaviour.Properties.copy(Blocks.BLACK_STAINED_GLASS_PANE)));

    // Misc
    public static final RegistryObject<Block> EASEL = BLOCKS.register("easel", EaselBlock::new);
    public static final RegistryObject<Block> RAIN_DETECTOR = BLOCKS.register("rain_detector", RainDetectorBlock::new);
    public static final RegistryObject<Block> GOLD_BARS = BLOCKS.register("gold_bars", () -> new IronBarsBlock(BlockBehaviour.Properties.copy(Blocks.IRON_BARS)));
    public static final RegistryObject<Block> ROSE = BLOCKS.register("rose", RoseBlock::new);
    public static final RegistryObject<Block> POTTED_ROSE = BLOCKS.register("potted_rose", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, ROSE, BlockBehaviour.Properties.copy(Blocks.POTTED_POPPY)));
    public static final RegistryObject<Block> SHEARED_ROSE_BUSH = BLOCKS.register("sheared_rose_bush", () -> new ShearedTallFlowerBlock(BlockBehaviour.Properties.copy(Blocks.ROSE_BUSH), ROSE));
    public static final RegistryObject<Block> PEONY = BLOCKS.register("peony", () -> new FlowerBlock(() -> MobEffects.HEALTH_BOOST, 2, BlockBehaviour.Properties.copy(Blocks.POPPY)));
    public static final RegistryObject<Block> POTTED_PEONY = BLOCKS.register("potted_peony", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, PEONY, BlockBehaviour.Properties.copy(Blocks.POTTED_POPPY)));
    public static final RegistryObject<Block> SHEARED_PEONY = BLOCKS.register("sheared_peony", () -> new ShearedTallFlowerBlock(BlockBehaviour.Properties.copy(Blocks.PEONY), PEONY));
    public static final RegistryObject<Block> LILAC = BLOCKS.register("lilac", () -> new FlowerBlock(() -> MobEffects.MOVEMENT_SPEED, 10, BlockBehaviour.Properties.copy(Blocks.POPPY)));
    public static final RegistryObject<Block> POTTED_LILAC = BLOCKS.register("potted_lilac", () -> new FlowerPotBlock(() -> (FlowerPotBlock) Blocks.FLOWER_POT, LILAC, BlockBehaviour.Properties.copy(Blocks.POTTED_POPPY)));
    public static final RegistryObject<Block> SHEARED_LILAC = BLOCKS.register("sheared_lilac", () -> new ShearedTallFlowerBlock(BlockBehaviour.Properties.copy(Blocks.LILAC), LILAC));
    public static final RegistryObject<Block> TRELLIS = BLOCKS.register("trellis", () -> new TrellisBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().instabreak().sound(SoundType.WOOD)));
    public static final RegistryObject<Block> TOMATO = BLOCKS.register("tomato", () -> new TomatoBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static final RegistryObject<Block> CHILI = BLOCKS.register("chili", () -> new ChiliBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static final RegistryObject<Block> RICE = BLOCKS.register("rice", () -> new RicePlantBlock(BlockBehaviour.Properties.of(Material.PLANT).noCollission().randomTicks().instabreak().sound(SoundType.CROP)));
    public static final RegistryObject<Block> WITHERED_VINE = BLOCKS.register("withered_vine", WitheredVineBlock::new);
    public static final RegistryObject<Block> WITHERED_BAMBOO = BLOCKS.register("withered_bamboo", WitheredVineBlock::new);

    // Cakes
    public static final RegistryObject<Block> CHOCOLATE_CAKE = BLOCKS.register("chocolate_cake", ModCakeBlock::new);
    public static final RegistryObject<Block> CANDLE_CHOCOLATE_CAKE = BLOCKS.register("candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> WHITE_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("white_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.WHITE_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> ORANGE_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("orange_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.ORANGE_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> MAGENTA_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("magenta_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.MAGENTA_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> LIGHT_BLUE_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("light_blue_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIGHT_BLUE_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> YELLOW_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("yellow_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.YELLOW_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> LIME_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("lime_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIME_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> PINK_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("pink_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.PINK_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> GRAY_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("gray_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.GRAY_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> LIGHT_GRAY_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("light_gray_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIGHT_GRAY_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> CYAN_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("cyan_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.CYAN_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> PURPLE_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("purple_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.PURPLE_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> BLUE_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("blue_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.BLUE_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> BROWN_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("brown_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.BROWN_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> GREEN_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("green_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.GREEN_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> RED_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("red_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.RED_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> BLACK_CANDLE_CHOCOLATE_CAKE = BLOCKS.register("black_candle_chocolate_cake", () -> new ModCandleCakeBlock(() -> Blocks.BLACK_CANDLE, CHOCOLATE_CAKE));
    public static final RegistryObject<Block> BERRY_CAKE = BLOCKS.register("berry_cake", ModCakeBlock::new);
    public static final RegistryObject<Block> CANDLE_BERRY_CAKE = BLOCKS.register("candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> WHITE_CANDLE_BERRY_CAKE = BLOCKS.register("white_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.WHITE_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> ORANGE_CANDLE_BERRY_CAKE = BLOCKS.register("orange_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.ORANGE_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> MAGENTA_CANDLE_BERRY_CAKE = BLOCKS.register("magenta_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.MAGENTA_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> LIGHT_BLUE_CANDLE_BERRY_CAKE = BLOCKS.register("light_blue_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIGHT_BLUE_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> YELLOW_CANDLE_BERRY_CAKE = BLOCKS.register("yellow_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.YELLOW_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> LIME_CANDLE_BERRY_CAKE = BLOCKS.register("lime_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIME_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> PINK_CANDLE_BERRY_CAKE = BLOCKS.register("pink_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.PINK_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> GRAY_CANDLE_BERRY_CAKE = BLOCKS.register("gray_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.GRAY_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> LIGHT_GRAY_CANDLE_BERRY_CAKE = BLOCKS.register("light_gray_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIGHT_GRAY_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> CYAN_CANDLE_BERRY_CAKE = BLOCKS.register("cyan_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.CYAN_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> PURPLE_CANDLE_BERRY_CAKE = BLOCKS.register("purple_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.PURPLE_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> BLUE_CANDLE_BERRY_CAKE = BLOCKS.register("blue_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.BLUE_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> BROWN_CANDLE_BERRY_CAKE = BLOCKS.register("brown_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.BROWN_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> GREEN_CANDLE_BERRY_CAKE = BLOCKS.register("green_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.GREEN_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> RED_CANDLE_BERRY_CAKE = BLOCKS.register("red_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.RED_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> BLACK_CANDLE_BERRY_CAKE = BLOCKS.register("black_candle_berry_cake", () -> new ModCandleCakeBlock(() -> Blocks.BLACK_CANDLE, BERRY_CAKE));
    public static final RegistryObject<Block> CARROT_CAKE = BLOCKS.register("carrot_cake", ModCakeBlock::new);
    public static final RegistryObject<Block> CANDLE_CARROT_CAKE = BLOCKS.register("candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> WHITE_CANDLE_CARROT_CAKE = BLOCKS.register("white_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.WHITE_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> ORANGE_CANDLE_CARROT_CAKE = BLOCKS.register("orange_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.ORANGE_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> MAGENTA_CANDLE_CARROT_CAKE = BLOCKS.register("magenta_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.MAGENTA_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> LIGHT_BLUE_CANDLE_CARROT_CAKE = BLOCKS.register("light_blue_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIGHT_BLUE_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> YELLOW_CANDLE_CARROT_CAKE = BLOCKS.register("yellow_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.YELLOW_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> LIME_CANDLE_CARROT_CAKE = BLOCKS.register("lime_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIME_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> PINK_CANDLE_CARROT_CAKE = BLOCKS.register("pink_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.PINK_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> GRAY_CANDLE_CARROT_CAKE = BLOCKS.register("gray_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.GRAY_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> LIGHT_GRAY_CANDLE_CARROT_CAKE = BLOCKS.register("light_gray_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.LIGHT_GRAY_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> CYAN_CANDLE_CARROT_CAKE = BLOCKS.register("cyan_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.CYAN_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> PURPLE_CANDLE_CARROT_CAKE = BLOCKS.register("purple_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.PURPLE_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> BLUE_CANDLE_CARROT_CAKE = BLOCKS.register("blue_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.BLUE_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> BROWN_CANDLE_CARROT_CAKE = BLOCKS.register("brown_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.BROWN_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> GREEN_CANDLE_CARROT_CAKE = BLOCKS.register("green_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.GREEN_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> RED_CANDLE_CARROT_CAKE = BLOCKS.register("red_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.RED_CANDLE, CARROT_CAKE));
    public static final RegistryObject<Block> BLACK_CANDLE_CARROT_CAKE = BLOCKS.register("black_candle_carrot_cake", () -> new ModCandleCakeBlock(() -> Blocks.BLACK_CANDLE, CARROT_CAKE));

    // VanillaBoom Stairs
    public static final RegistryObject<Block> COBBLESTONE_BRICK_STAIRS = BLOCKS.register("cobblestone_brick_stairs", () -> new ModStairBlock(() -> COBBLESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_BRICK_STAIRS = BLOCKS.register("mossy_cobblestone_brick_stairs", () -> new ModStairBlock(() -> MOSSY_COBBLESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MOSSY_COBBLESTONE)));
    public static final RegistryObject<Block> MAGMA_BRICK_STAIRS = BLOCKS.register("magma_brick_stairs", () -> new ModStairBlock(() -> MAGMA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MAGMA_BLOCK)));
    public static final RegistryObject<Block> OBSIDIAN_BRICK_STAIRS = BLOCKS.register("obsidian_brick_stairs", () -> new ModStairBlock(() -> OBSIDIAN_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
    public static final RegistryObject<Block> SNOW_BRICK_STAIRS = BLOCKS.register("snow_brick_stairs", () -> new ModStairBlock(() -> SNOW_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
    public static final RegistryObject<Block> TERRACOTTA_BRICK_STAIRS = BLOCKS.register("terracotta_brick_stairs", () -> new ModStairBlock(() -> TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("white_terracotta_brick_stairs", () -> new ModStairBlock(() -> WHITE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("orange_terracotta_brick_stairs", () -> new ModStairBlock(() -> ORANGE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("magenta_terracotta_brick_stairs", () -> new ModStairBlock(() -> MAGENTA_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("light_blue_terracotta_brick_stairs", () -> new ModStairBlock(() -> LIGHT_BLUE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("yellow_terracotta_brick_stairs", () -> new ModStairBlock(() -> YELLOW_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
    public static final RegistryObject<Block> LIME_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("lime_terracotta_brick_stairs", () -> new ModStairBlock(() -> LIME_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
    public static final RegistryObject<Block> PINK_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("pink_terracotta_brick_stairs", () -> new ModStairBlock(() -> PINK_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("gray_terracotta_brick_stairs", () -> new ModStairBlock(() -> GRAY_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("light_gray_terracotta_brick_stairs", () -> new ModStairBlock(() -> LIGHT_GRAY_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("cyan_terracotta_brick_stairs", () -> new ModStairBlock(() -> CYAN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("purple_terracotta_brick_stairs", () -> new ModStairBlock(() -> PURPLE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("blue_terracotta_brick_stairs", () -> new ModStairBlock(() -> BLUE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("brown_terracotta_brick_stairs", () -> new ModStairBlock(() -> BROWN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("green_terracotta_brick_stairs", () -> new ModStairBlock(() -> GREEN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
    public static final RegistryObject<Block> RED_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("red_terracotta_brick_stairs", () -> new ModStairBlock(() -> RED_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_BRICK_STAIRS = BLOCKS.register("black_terracotta_brick_stairs", () -> new ModStairBlock(() -> BLACK_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
    public static final RegistryObject<Block> PERIDOTITE_STAIRS = BLOCKS.register("peridotite_stairs", () -> new ModStairBlock(() -> PERIDOTITE.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> HYDRO_ROCK_STAIRS = BLOCKS.register("hydro_rock_stairs", () -> new ModStairBlock(() -> HYDRO_ROCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> INFERNAL_ROCK_STAIRS = BLOCKS.register("infernal_rock_stairs", () -> new ModStairBlock(() -> INFERNAL_ROCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_STAIRS = BLOCKS.register("polished_peridotite_stairs", () -> new ModStairBlock(() -> POLISHED_PERIDOTITE.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> POLISHED_PRISMARINE_STAIRS = BLOCKS.register("polished_prismarine_stairs", () -> new ModStairBlock(() -> POLISHED_PRISMARINE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_DARK_PRISMARINE_STAIRS = BLOCKS.register("polished_dark_prismarine_stairs", () -> new ModStairBlock(() -> POLISHED_DARK_PRISMARINE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_END_STONE_STAIRS = BLOCKS.register("polished_end_stone_stairs", () -> new ModStairBlock(() -> POLISHED_END_STONE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.END_STONE)));
    public static final RegistryObject<Block> POLISHED_NETHERRACK_STAIRS = BLOCKS.register("polished_netherrack_stairs", () -> new ModStairBlock(() -> POLISHED_NETHERRACK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> CRACKED_RED_NETHER_BRICK_STAIRS = BLOCKS.register("cracked_red_nether_brick_stairs", () -> new ModStairBlock(() -> CRACKED_RED_NETHER_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_RED_NETHER_BRICK_STAIRS = BLOCKS.register("chiseled_red_nether_brick_stairs", () -> new ModStairBlock(() -> CHISELED_RED_NETHER_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_PURPUR_BLOCK_STAIRS = BLOCKS.register("chiseled_purpur_block_stairs", () -> new ModStairBlock(() -> CHISELED_PURPUR_BLOCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> CHISELED_OBSIDIAN_STAIRS = BLOCKS.register("chiseled_obsidian_stairs", () -> new ModStairBlock(() -> CHISELED_OBSIDIAN.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));

    // Vanilla Stairs
    public static final RegistryObject<Block> CRACKED_STONE_BRICK_STAIRS = BLOCKS.register("cracked_stone_brick_stairs", () -> new ModStairBlock(Blocks.CRACKED_STONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_STONE_BRICK_STAIRS = BLOCKS.register("chiseled_stone_brick_stairs", () -> new ModStairBlock(Blocks.CHISELED_STONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_SANDSTONE_STAIRS = BLOCKS.register("chiseled_sandstone_stairs", () -> new ModStairBlock(Blocks.CHISELED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_RED_SANDSTONE_STAIRS = BLOCKS.register("chiseled_red_sandstone_stairs", () -> new ModStairBlock(Blocks.CHISELED_RED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> IRON_BLOCK_STAIRS = BLOCKS.register("iron_block_stairs", () -> new ModStairBlock(Blocks.IRON_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> GOLD_BLOCK_STAIRS = BLOCKS.register("gold_block_stairs", () -> new ModStairBlock(Blocks.GOLD_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> OBSIDIAN_STAIRS = BLOCKS.register("obsidian_stairs", () -> new ModStairBlock(Blocks.OBSIDIAN::defaultBlockState));
    public static final RegistryObject<Block> BEDROCK_STAIRS = BLOCKS.register("bedrock_stairs", () -> new ModStairBlock(Blocks.BEDROCK::defaultBlockState));
    public static final RegistryObject<Block> NETHERRACK_STAIRS = BLOCKS.register("netherrack_stairs", () -> new ModStairBlock(Blocks.NETHERRACK::defaultBlockState));
    public static final RegistryObject<Block> CRACKED_NETHER_BRICK_STAIRS = BLOCKS.register("cracked_nether_brick_stairs", () -> new ModStairBlock(Blocks.CRACKED_NETHER_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_NETHER_BRICK_STAIRS = BLOCKS.register("chiseled_nether_brick_stairs", () -> new ModStairBlock(Blocks.CHISELED_NETHER_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CRACKED_POLISHED_BLACKSTONE_BRICK_STAIRS = BLOCKS.register("cracked_polished_blackstone_brick_stairs", () -> new ModStairBlock(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_POLISHED_BLACKSTONE_STAIRS = BLOCKS.register("chiseled_polished_blackstone_stairs", () -> new ModStairBlock(Blocks.CHISELED_POLISHED_BLACKSTONE::defaultBlockState));
    public static final RegistryObject<Block> END_STONE_STAIRS = BLOCKS.register("end_stone_stairs", () -> new ModStairBlock(Blocks.END_STONE::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_QUARTZ_BLOCK_STAIRS = BLOCKS.register("chiseled_quartz_block_stairs", () -> new ModStairBlock(Blocks.CHISELED_QUARTZ_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> QUARTZ_BRICK_STAIRS = BLOCKS.register("quartz_brick_stairs", () -> new ModStairBlock(Blocks.QUARTZ_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> TERRACOTTA_STAIRS = BLOCKS.register("terracotta_stairs", () -> new ModStairBlock(Blocks.TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_STAIRS = BLOCKS.register("white_terracotta_stairs", () -> new ModStairBlock(Blocks.WHITE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_STAIRS = BLOCKS.register("orange_terracotta_stairs", () -> new ModStairBlock(Blocks.ORANGE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_STAIRS = BLOCKS.register("magenta_terracotta_stairs", () -> new ModStairBlock(Blocks.MAGENTA_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_STAIRS = BLOCKS.register("light_blue_terracotta_stairs", () -> new ModStairBlock(Blocks.LIGHT_BLUE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_STAIRS = BLOCKS.register("yellow_terracotta_stairs", () -> new ModStairBlock(Blocks.YELLOW_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIME_TERRACOTTA_STAIRS = BLOCKS.register("lime_terracotta_stairs", () -> new ModStairBlock(Blocks.LIME_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> PINK_TERRACOTTA_STAIRS = BLOCKS.register("pink_terracotta_stairs", () -> new ModStairBlock(Blocks.PINK_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_STAIRS = BLOCKS.register("gray_terracotta_stairs", () -> new ModStairBlock(Blocks.GRAY_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_STAIRS = BLOCKS.register("light_gray_terracotta_stairs", () -> new ModStairBlock(Blocks.LIGHT_GRAY_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_STAIRS = BLOCKS.register("cyan_terracotta_stairs", () -> new ModStairBlock(Blocks.CYAN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_STAIRS = BLOCKS.register("purple_terracotta_stairs", () -> new ModStairBlock(Blocks.PURPLE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_STAIRS = BLOCKS.register("blue_terracotta_stairs", () -> new ModStairBlock(Blocks.BLUE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_STAIRS = BLOCKS.register("brown_terracotta_stairs", () -> new ModStairBlock(Blocks.BROWN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_STAIRS = BLOCKS.register("green_terracotta_stairs", () -> new ModStairBlock(Blocks.GREEN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> RED_TERRACOTTA_STAIRS = BLOCKS.register("red_terracotta_stairs", () -> new ModStairBlock(Blocks.RED_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_STAIRS = BLOCKS.register("black_terracotta_stairs", () -> new ModStairBlock(Blocks.BLACK_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> WHITE_CONCRETE_STAIRS = BLOCKS.register("white_concrete_stairs", () -> new ModStairBlock(Blocks.WHITE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> ORANGE_CONCRETE_STAIRS = BLOCKS.register("orange_concrete_stairs", () -> new ModStairBlock(Blocks.ORANGE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> MAGENTA_CONCRETE_STAIRS = BLOCKS.register("magenta_concrete_stairs", () -> new ModStairBlock(Blocks.MAGENTA_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_STAIRS = BLOCKS.register("light_blue_concrete_stairs", () -> new ModStairBlock(Blocks.LIGHT_BLUE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> YELLOW_CONCRETE_STAIRS = BLOCKS.register("yellow_concrete_stairs", () -> new ModStairBlock(Blocks.YELLOW_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIME_CONCRETE_STAIRS = BLOCKS.register("lime_concrete_stairs", () -> new ModStairBlock(Blocks.LIME_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> PINK_CONCRETE_STAIRS = BLOCKS.register("pink_concrete_stairs", () -> new ModStairBlock(Blocks.PINK_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> GRAY_CONCRETE_STAIRS = BLOCKS.register("gray_concrete_stairs", () -> new ModStairBlock(Blocks.GRAY_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_STAIRS = BLOCKS.register("light_gray_concrete_stairs", () -> new ModStairBlock(Blocks.LIGHT_GRAY_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> CYAN_CONCRETE_STAIRS = BLOCKS.register("cyan_concrete_stairs", () -> new ModStairBlock(Blocks.CYAN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> PURPLE_CONCRETE_STAIRS = BLOCKS.register("purple_concrete_stairs", () -> new ModStairBlock(Blocks.PURPLE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BLUE_CONCRETE_STAIRS = BLOCKS.register("blue_concrete_stairs", () -> new ModStairBlock(Blocks.BLUE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BROWN_CONCRETE_STAIRS = BLOCKS.register("brown_concrete_stairs", () -> new ModStairBlock(Blocks.BROWN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> GREEN_CONCRETE_STAIRS = BLOCKS.register("green_concrete_stairs", () -> new ModStairBlock(Blocks.GREEN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> RED_CONCRETE_STAIRS = BLOCKS.register("red_concrete_stairs", () -> new ModStairBlock(Blocks.RED_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BLACK_CONCRETE_STAIRS = BLOCKS.register("black_concrete_stairs", () -> new ModStairBlock(Blocks.BLACK_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> OAK_WOOD_STAIRS = BLOCKS.register("oak_wood_stairs", () -> new ModStairBlock(Blocks.OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> SPRUCE_WOOD_STAIRS = BLOCKS.register("spruce_wood_stairs", () -> new ModStairBlock(Blocks.SPRUCE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> BIRCH_WOOD_STAIRS = BLOCKS.register("birch_wood_stairs", () -> new ModStairBlock(Blocks.BIRCH_WOOD::defaultBlockState));
    public static final RegistryObject<Block> JUNGLE_WOOD_STAIRS = BLOCKS.register("jungle_wood_stairs", () -> new ModStairBlock(Blocks.JUNGLE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> ACACIA_WOOD_STAIRS = BLOCKS.register("acacia_wood_stairs", () -> new ModStairBlock(Blocks.ACACIA_WOOD::defaultBlockState));
    public static final RegistryObject<Block> DARK_OAK_WOOD_STAIRS = BLOCKS.register("dark_oak_wood_stairs", () -> new ModStairBlock(Blocks.DARK_OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> CRIMSON_HYPHAE_STAIRS = BLOCKS.register("crimson_hyphae_stairs", () -> new ModStairBlock(Blocks.CRIMSON_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> WARPED_HYPHAE_STAIRS = BLOCKS.register("warped_hyphae_stairs", () -> new ModStairBlock(Blocks.WARPED_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_OAK_WOOD_STAIRS = BLOCKS.register("stripped_oak_wood_stairs", () -> new ModStairBlock(Blocks.STRIPPED_OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_SPRUCE_WOOD_STAIRS = BLOCKS.register("stripped_spruce_wood_stairs", () -> new ModStairBlock(Blocks.STRIPPED_SPRUCE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_BIRCH_WOOD_STAIRS = BLOCKS.register("stripped_birch_wood_stairs", () -> new ModStairBlock(Blocks.STRIPPED_BIRCH_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_JUNGLE_WOOD_STAIRS = BLOCKS.register("stripped_jungle_wood_stairs", () -> new ModStairBlock(Blocks.STRIPPED_JUNGLE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_ACACIA_WOOD_STAIRS = BLOCKS.register("stripped_acacia_wood_stairs", () -> new ModStairBlock(Blocks.STRIPPED_ACACIA_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_DARK_OAK_WOOD_STAIRS = BLOCKS.register("stripped_dark_oak_wood_stairs", () -> new ModStairBlock(Blocks.STRIPPED_DARK_OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_CRIMSON_HYPHAE_STAIRS = BLOCKS.register("stripped_crimson_hyphae_stairs", () -> new ModStairBlock(Blocks.STRIPPED_CRIMSON_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_WARPED_HYPHAE_STAIRS = BLOCKS.register("stripped_warped_hyphae_stairs", () -> new ModStairBlock(Blocks.STRIPPED_WARPED_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> CUT_SANDSTONE_STAIRS = BLOCKS.register("cut_sandstone_stairs", () -> new ModStairBlock(Blocks.CUT_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> CUT_RED_SANDSTONE_STAIRS = BLOCKS.register("cut_red_sandstone_stairs", () -> new ModStairBlock(Blocks.CUT_RED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> SMOOTH_STONE_STAIRS = BLOCKS.register("smooth_stone_stairs", () -> new ModStairBlock(Blocks.SMOOTH_STONE::defaultBlockState));

    // VanillaBoom Slabs
    public static final RegistryObject<Block> COBBLESTONE_BRICK_SLAB = BLOCKS.register("cobblestone_brick_slab", () -> new ModSlabBlock(() -> COBBLESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_BRICK_SLAB = BLOCKS.register("mossy_cobblestone_brick_slab", () -> new ModSlabBlock(() -> MOSSY_COBBLESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MOSSY_COBBLESTONE)));
    public static final RegistryObject<Block> MAGMA_BRICK_SLAB = BLOCKS.register("magma_brick_slab", () -> new ModSlabBlock(() -> MAGMA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MAGMA_BLOCK)));
    public static final RegistryObject<Block> OBSIDIAN_BRICK_SLAB = BLOCKS.register("obsidian_brick_slab", () -> new ModSlabBlock(() -> OBSIDIAN_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
    public static final RegistryObject<Block> SNOW_BRICK_SLAB = BLOCKS.register("snow_brick_slab", () -> new ModSlabBlock(() -> SNOW_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
    public static final RegistryObject<Block> TERRACOTTA_BRICK_SLAB = BLOCKS.register("terracotta_brick_slab", () -> new ModSlabBlock(() -> TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_BRICK_SLAB = BLOCKS.register("white_terracotta_brick_slab", () -> new ModSlabBlock(() -> WHITE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_BRICK_SLAB = BLOCKS.register("orange_terracotta_brick_slab", () -> new ModSlabBlock(() -> ORANGE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_BRICK_SLAB = BLOCKS.register("magenta_terracotta_brick_slab", () -> new ModSlabBlock(() -> MAGENTA_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_BRICK_SLAB = BLOCKS.register("light_blue_terracotta_brick_slab", () -> new ModSlabBlock(() -> LIGHT_BLUE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_BRICK_SLAB = BLOCKS.register("yellow_terracotta_brick_slab", () -> new ModSlabBlock(() -> YELLOW_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
    public static final RegistryObject<Block> LIME_TERRACOTTA_BRICK_SLAB = BLOCKS.register("lime_terracotta_brick_slab", () -> new ModSlabBlock(() -> LIME_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
    public static final RegistryObject<Block> PINK_TERRACOTTA_BRICK_SLAB = BLOCKS.register("pink_terracotta_brick_slab", () -> new ModSlabBlock(() -> PINK_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_BRICK_SLAB = BLOCKS.register("gray_terracotta_brick_slab", () -> new ModSlabBlock(() -> GRAY_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_BRICK_SLAB = BLOCKS.register("light_gray_terracotta_brick_slab", () -> new ModSlabBlock(() -> LIGHT_GRAY_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_BRICK_SLAB = BLOCKS.register("cyan_terracotta_brick_slab", () -> new ModSlabBlock(() -> CYAN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_BRICK_SLAB = BLOCKS.register("purple_terracotta_brick_slab", () -> new ModSlabBlock(() -> PURPLE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_BRICK_SLAB = BLOCKS.register("blue_terracotta_brick_slab", () -> new ModSlabBlock(() -> BLUE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_BRICK_SLAB = BLOCKS.register("brown_terracotta_brick_slab", () -> new ModSlabBlock(() -> BROWN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_BRICK_SLAB = BLOCKS.register("green_terracotta_brick_slab", () -> new ModSlabBlock(() -> GREEN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
    public static final RegistryObject<Block> RED_TERRACOTTA_BRICK_SLAB = BLOCKS.register("red_terracotta_brick_slab", () -> new ModSlabBlock(() -> RED_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_BRICK_SLAB = BLOCKS.register("black_terracotta_brick_slab", () -> new ModSlabBlock(() -> BLACK_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
    public static final RegistryObject<Block> PERIDOTITE_SLAB = BLOCKS.register("peridotite_slab", () -> new ModSlabBlock(() -> PERIDOTITE.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> HYDRO_ROCK_SLAB = BLOCKS.register("hydro_rock_slab", () -> new ModSlabBlock(() -> HYDRO_ROCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> INFERNAL_ROCK_SLAB = BLOCKS.register("infernal_rock_slab", () -> new ModSlabBlock(() -> INFERNAL_ROCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_SLAB = BLOCKS.register("polished_peridotite_slab", () -> new ModSlabBlock(() -> POLISHED_PERIDOTITE.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> POLISHED_PRISMARINE_SLAB = BLOCKS.register("polished_prismarine_slab", () -> new ModSlabBlock(() -> POLISHED_PRISMARINE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_DARK_PRISMARINE_SLAB = BLOCKS.register("polished_dark_prismarine_slab", () -> new ModSlabBlock(() -> POLISHED_DARK_PRISMARINE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_END_STONE_SLAB = BLOCKS.register("polished_end_stone_slab", () -> new ModSlabBlock(() -> POLISHED_END_STONE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.END_STONE)));
    public static final RegistryObject<Block> POLISHED_NETHERRACK_SLAB = BLOCKS.register("polished_netherrack_slab", () -> new ModSlabBlock(() -> POLISHED_NETHERRACK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> CRACKED_RED_NETHER_BRICK_SLAB = BLOCKS.register("cracked_red_nether_brick_slab", () -> new ModSlabBlock(() -> CRACKED_RED_NETHER_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_RED_NETHER_BRICK_SLAB = BLOCKS.register("chiseled_red_nether_brick_slab", () -> new ModSlabBlock(() -> CHISELED_RED_NETHER_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_PURPUR_BLOCK_SLAB = BLOCKS.register("chiseled_purpur_block_slab", () -> new ModSlabBlock(() -> CHISELED_PURPUR_BLOCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> CHISELED_OBSIDIAN_SLAB = BLOCKS.register("chiseled_obsidian_slab", () -> new ModSlabBlock(() -> CHISELED_OBSIDIAN.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));

    // Vanilla Slabs
    public static final RegistryObject<Block> CRACKED_STONE_BRICK_SLAB = BLOCKS.register("cracked_stone_brick_slab", () -> new ModSlabBlock(Blocks.CRACKED_STONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_STONE_BRICK_SLAB = BLOCKS.register("chiseled_stone_brick_slab", () -> new ModSlabBlock(Blocks.CHISELED_STONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_SANDSTONE_SLAB = BLOCKS.register("chiseled_sandstone_slab", () -> new ModSlabBlock(Blocks.CHISELED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_RED_SANDSTONE_SLAB = BLOCKS.register("chiseled_red_sandstone_slab", () -> new ModSlabBlock(Blocks.CHISELED_RED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> IRON_BLOCK_SLAB = BLOCKS.register("iron_block_slab", () -> new ModSlabBlock(Blocks.IRON_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> GOLD_BLOCK_SLAB = BLOCKS.register("gold_block_slab", () -> new ModSlabBlock(Blocks.GOLD_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> OBSIDIAN_SLAB = BLOCKS.register("obsidian_slab", () -> new ModSlabBlock(Blocks.OBSIDIAN::defaultBlockState));
    public static final RegistryObject<Block> BEDROCK_SLAB = BLOCKS.register("bedrock_slab", () -> new ModSlabBlock(Blocks.BEDROCK::defaultBlockState));
    public static final RegistryObject<Block> NETHERRACK_SLAB = BLOCKS.register("netherrack_slab", () -> new ModSlabBlock(Blocks.NETHERRACK::defaultBlockState));
    public static final RegistryObject<Block> CRACKED_NETHER_BRICK_SLAB = BLOCKS.register("cracked_nether_brick_slab", () -> new ModSlabBlock(Blocks.CRACKED_NETHER_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_NETHER_BRICK_SLAB = BLOCKS.register("chiseled_nether_brick_slab", () -> new ModSlabBlock(Blocks.CHISELED_NETHER_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CRACKED_POLISHED_BLACKSTONE_BRICK_SLAB = BLOCKS.register("cracked_polished_blackstone_brick_slab", () -> new ModSlabBlock(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_POLISHED_BLACKSTONE_SLAB = BLOCKS.register("chiseled_polished_blackstone_slab", () -> new ModSlabBlock(Blocks.CHISELED_POLISHED_BLACKSTONE::defaultBlockState));
    public static final RegistryObject<Block> END_STONE_SLAB = BLOCKS.register("end_stone_slab", () -> new ModSlabBlock(Blocks.END_STONE::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_QUARTZ_BLOCK_SLAB = BLOCKS.register("chiseled_quartz_block_slab", () -> new ModSlabBlock(Blocks.CHISELED_QUARTZ_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> QUARTZ_BRICK_SLAB = BLOCKS.register("quartz_brick_slab", () -> new ModSlabBlock(Blocks.QUARTZ_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> TERRACOTTA_SLAB = BLOCKS.register("terracotta_slab", () -> new ModSlabBlock(Blocks.TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_SLAB = BLOCKS.register("white_terracotta_slab", () -> new ModSlabBlock(Blocks.WHITE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_SLAB = BLOCKS.register("orange_terracotta_slab", () -> new ModSlabBlock(Blocks.ORANGE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_SLAB = BLOCKS.register("magenta_terracotta_slab", () -> new ModSlabBlock(Blocks.MAGENTA_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_SLAB = BLOCKS.register("light_blue_terracotta_slab", () -> new ModSlabBlock(Blocks.LIGHT_BLUE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_SLAB = BLOCKS.register("yellow_terracotta_slab", () -> new ModSlabBlock(Blocks.YELLOW_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIME_TERRACOTTA_SLAB = BLOCKS.register("lime_terracotta_slab", () -> new ModSlabBlock(Blocks.LIME_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> PINK_TERRACOTTA_SLAB = BLOCKS.register("pink_terracotta_slab", () -> new ModSlabBlock(Blocks.PINK_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_SLAB = BLOCKS.register("gray_terracotta_slab", () -> new ModSlabBlock(Blocks.GRAY_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_SLAB = BLOCKS.register("light_gray_terracotta_slab", () -> new ModSlabBlock(Blocks.LIGHT_GRAY_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_SLAB = BLOCKS.register("cyan_terracotta_slab", () -> new ModSlabBlock(Blocks.CYAN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_SLAB = BLOCKS.register("purple_terracotta_slab", () -> new ModSlabBlock(Blocks.PURPLE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_SLAB = BLOCKS.register("blue_terracotta_slab", () -> new ModSlabBlock(Blocks.BLUE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_SLAB = BLOCKS.register("brown_terracotta_slab", () -> new ModSlabBlock(Blocks.BROWN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_SLAB = BLOCKS.register("green_terracotta_slab", () -> new ModSlabBlock(Blocks.GREEN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> RED_TERRACOTTA_SLAB = BLOCKS.register("red_terracotta_slab", () -> new ModSlabBlock(Blocks.RED_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_SLAB = BLOCKS.register("black_terracotta_slab", () -> new ModSlabBlock(Blocks.BLACK_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> WHITE_CONCRETE_SLAB = BLOCKS.register("white_concrete_slab", () -> new ModSlabBlock(Blocks.WHITE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> ORANGE_CONCRETE_SLAB = BLOCKS.register("orange_concrete_slab", () -> new ModSlabBlock(Blocks.ORANGE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> MAGENTA_CONCRETE_SLAB = BLOCKS.register("magenta_concrete_slab", () -> new ModSlabBlock(Blocks.MAGENTA_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_SLAB = BLOCKS.register("light_blue_concrete_slab", () -> new ModSlabBlock(Blocks.LIGHT_BLUE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> YELLOW_CONCRETE_SLAB = BLOCKS.register("yellow_concrete_slab", () -> new ModSlabBlock(Blocks.YELLOW_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIME_CONCRETE_SLAB = BLOCKS.register("lime_concrete_slab", () -> new ModSlabBlock(Blocks.LIME_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> PINK_CONCRETE_SLAB = BLOCKS.register("pink_concrete_slab", () -> new ModSlabBlock(Blocks.PINK_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> GRAY_CONCRETE_SLAB = BLOCKS.register("gray_concrete_slab", () -> new ModSlabBlock(Blocks.GRAY_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_SLAB = BLOCKS.register("light_gray_concrete_slab", () -> new ModSlabBlock(Blocks.LIGHT_GRAY_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> CYAN_CONCRETE_SLAB = BLOCKS.register("cyan_concrete_slab", () -> new ModSlabBlock(Blocks.CYAN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> PURPLE_CONCRETE_SLAB = BLOCKS.register("purple_concrete_slab", () -> new ModSlabBlock(Blocks.PURPLE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BLUE_CONCRETE_SLAB = BLOCKS.register("blue_concrete_slab", () -> new ModSlabBlock(Blocks.BLUE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BROWN_CONCRETE_SLAB = BLOCKS.register("brown_concrete_slab", () -> new ModSlabBlock(Blocks.BROWN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> GREEN_CONCRETE_SLAB = BLOCKS.register("green_concrete_slab", () -> new ModSlabBlock(Blocks.GREEN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> RED_CONCRETE_SLAB = BLOCKS.register("red_concrete_slab", () -> new ModSlabBlock(Blocks.RED_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BLACK_CONCRETE_SLAB = BLOCKS.register("black_concrete_slab", () -> new ModSlabBlock(Blocks.BLACK_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> OAK_WOOD_SLAB = BLOCKS.register("oak_wood_slab", () -> new ModSlabBlock(Blocks.OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> SPRUCE_WOOD_SLAB = BLOCKS.register("spruce_wood_slab", () -> new ModSlabBlock(Blocks.SPRUCE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> BIRCH_WOOD_SLAB = BLOCKS.register("birch_wood_slab", () -> new ModSlabBlock(Blocks.BIRCH_WOOD::defaultBlockState));
    public static final RegistryObject<Block> JUNGLE_WOOD_SLAB = BLOCKS.register("jungle_wood_slab", () -> new ModSlabBlock(Blocks.JUNGLE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> ACACIA_WOOD_SLAB = BLOCKS.register("acacia_wood_slab", () -> new ModSlabBlock(Blocks.ACACIA_WOOD::defaultBlockState));
    public static final RegistryObject<Block> DARK_OAK_WOOD_SLAB = BLOCKS.register("dark_oak_wood_slab", () -> new ModSlabBlock(Blocks.DARK_OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> CRIMSON_HYPHAE_SLAB = BLOCKS.register("crimson_hyphae_slab", () -> new ModSlabBlock(Blocks.CRIMSON_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> WARPED_HYPHAE_SLAB = BLOCKS.register("warped_hyphae_slab", () -> new ModSlabBlock(Blocks.WARPED_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_OAK_WOOD_SLAB = BLOCKS.register("stripped_oak_wood_slab", () -> new ModSlabBlock(Blocks.STRIPPED_OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_SPRUCE_WOOD_SLAB = BLOCKS.register("stripped_spruce_wood_slab", () -> new ModSlabBlock(Blocks.STRIPPED_SPRUCE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_BIRCH_WOOD_SLAB = BLOCKS.register("stripped_birch_wood_slab", () -> new ModSlabBlock(Blocks.STRIPPED_BIRCH_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_JUNGLE_WOOD_SLAB = BLOCKS.register("stripped_jungle_wood_slab", () -> new ModSlabBlock(Blocks.STRIPPED_JUNGLE_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_ACACIA_WOOD_SLAB = BLOCKS.register("stripped_acacia_wood_slab", () -> new ModSlabBlock(Blocks.STRIPPED_ACACIA_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_DARK_OAK_WOOD_SLAB = BLOCKS.register("stripped_dark_oak_wood_slab", () -> new ModSlabBlock(Blocks.STRIPPED_DARK_OAK_WOOD::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_CRIMSON_HYPHAE_SLAB = BLOCKS.register("stripped_crimson_hyphae_slab", () -> new ModSlabBlock(Blocks.STRIPPED_CRIMSON_HYPHAE::defaultBlockState));
    public static final RegistryObject<Block> STRIPPED_WARPED_HYPHAE_SLAB = BLOCKS.register("stripped_warped_hyphae_slab", () -> new ModSlabBlock(Blocks.STRIPPED_WARPED_HYPHAE::defaultBlockState));

    // VanillaBoom Walls
    public static final RegistryObject<Block> COBBLESTONE_BRICK_WALL = BLOCKS.register("cobblestone_brick_wall", () -> new ModWallBlock(() -> COBBLESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.COBBLESTONE)));
    public static final RegistryObject<Block> MOSSY_COBBLESTONE_BRICK_WALL = BLOCKS.register("mossy_cobblestone_brick_wall", () -> new ModWallBlock(() -> MOSSY_COBBLESTONE_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MOSSY_COBBLESTONE)));
    public static final RegistryObject<Block> MAGMA_BRICK_WALL = BLOCKS.register("magma_brick_wall", () -> new ModWallBlock(() -> MAGMA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MAGMA_BLOCK)));
    public static final RegistryObject<Block> OBSIDIAN_BRICK_WALL = BLOCKS.register("obsidian_brick_wall", () -> new ModWallBlock(() -> OBSIDIAN_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));
    public static final RegistryObject<Block> SNOW_BRICK_WALL = BLOCKS.register("snow_brick_wall", () -> new ModWallBlock(() -> SNOW_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.SNOW_BLOCK)));
    public static final RegistryObject<Block> TERRACOTTA_BRICK_WALL = BLOCKS.register("terracotta_brick_wall", () -> new ModWallBlock(() -> TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.TERRACOTTA)));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_BRICK_WALL = BLOCKS.register("white_terracotta_brick_wall", () -> new ModWallBlock(() -> WHITE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.WHITE_TERRACOTTA)));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_BRICK_WALL = BLOCKS.register("orange_terracotta_brick_wall", () -> new ModWallBlock(() -> ORANGE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.ORANGE_TERRACOTTA)));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_BRICK_WALL = BLOCKS.register("magenta_terracotta_brick_wall", () -> new ModWallBlock(() -> MAGENTA_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.MAGENTA_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_BRICK_WALL = BLOCKS.register("light_blue_terracotta_brick_wall", () -> new ModWallBlock(() -> LIGHT_BLUE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIGHT_BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_BRICK_WALL = BLOCKS.register("yellow_terracotta_brick_wall", () -> new ModWallBlock(() -> YELLOW_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.YELLOW_TERRACOTTA)));
    public static final RegistryObject<Block> LIME_TERRACOTTA_BRICK_WALL = BLOCKS.register("lime_terracotta_brick_wall", () -> new ModWallBlock(() -> LIME_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIME_TERRACOTTA)));
    public static final RegistryObject<Block> PINK_TERRACOTTA_BRICK_WALL = BLOCKS.register("pink_terracotta_brick_wall", () -> new ModWallBlock(() -> PINK_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PINK_TERRACOTTA)));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_BRICK_WALL = BLOCKS.register("gray_terracotta_brick_wall", () -> new ModWallBlock(() -> GRAY_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_BRICK_WALL = BLOCKS.register("light_gray_terracotta_brick_wall", () -> new ModWallBlock(() -> LIGHT_GRAY_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.LIGHT_GRAY_TERRACOTTA)));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_BRICK_WALL = BLOCKS.register("cyan_terracotta_brick_wall", () -> new ModWallBlock(() -> CYAN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.CYAN_TERRACOTTA)));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_BRICK_WALL = BLOCKS.register("purple_terracotta_brick_wall", () -> new ModWallBlock(() -> PURPLE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PURPLE_TERRACOTTA)));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_BRICK_WALL = BLOCKS.register("blue_terracotta_brick_wall", () -> new ModWallBlock(() -> BLUE_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BLUE_TERRACOTTA)));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_BRICK_WALL = BLOCKS.register("brown_terracotta_brick_wall", () -> new ModWallBlock(() -> BROWN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BROWN_TERRACOTTA)));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_BRICK_WALL = BLOCKS.register("green_terracotta_brick_wall", () -> new ModWallBlock(() -> GREEN_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.GREEN_TERRACOTTA)));
    public static final RegistryObject<Block> RED_TERRACOTTA_BRICK_WALL = BLOCKS.register("red_terracotta_brick_wall", () -> new ModWallBlock(() -> RED_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_TERRACOTTA)));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_BRICK_WALL = BLOCKS.register("black_terracotta_brick_wall", () -> new ModWallBlock(() -> BLACK_TERRACOTTA_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.BLACK_TERRACOTTA)));
    public static final RegistryObject<Block> PERIDOTITE_WALL = BLOCKS.register("peridotite_wall", () -> new ModWallBlock(() -> PERIDOTITE.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> HYDRO_ROCK_WALL = BLOCKS.register("hydro_rock_wall", () -> new ModWallBlock(() -> HYDRO_ROCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> INFERNAL_ROCK_WALL = BLOCKS.register("infernal_rock_wall", () -> new ModWallBlock(() -> INFERNAL_ROCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> POLISHED_PERIDOTITE_WALL = BLOCKS.register("polished_peridotite_wall", () -> new ModWallBlock(() -> POLISHED_PERIDOTITE.get().defaultBlockState(), BlockBehaviour.Properties.of(Material.STONE, MaterialColor.TERRACOTTA_LIGHT_GREEN).requiresCorrectToolForDrops().strength(1.5F, 6.0F)));
    public static final RegistryObject<Block> POLISHED_PRISMARINE_WALL = BLOCKS.register("polished_prismarine_wall", () -> new ModWallBlock(() -> POLISHED_PRISMARINE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_DARK_PRISMARINE_WALL = BLOCKS.register("polished_dark_prismarine_wall", () -> new ModWallBlock(() -> POLISHED_DARK_PRISMARINE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.DARK_PRISMARINE)));
    public static final RegistryObject<Block> POLISHED_END_STONE_WALL = BLOCKS.register("polished_end_stone_wall", () -> new ModWallBlock(() -> POLISHED_END_STONE.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.END_STONE)));
    public static final RegistryObject<Block> POLISHED_NETHERRACK_WALL = BLOCKS.register("polished_netherrack_wall", () -> new ModWallBlock(() -> POLISHED_NETHERRACK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.NETHERRACK)));
    public static final RegistryObject<Block> CRACKED_RED_NETHER_BRICK_WALL = BLOCKS.register("cracked_red_nether_brick_wall", () -> new ModWallBlock(() -> CRACKED_RED_NETHER_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_RED_NETHER_BRICK_WALL = BLOCKS.register("chiseled_red_nether_brick_wall", () -> new ModWallBlock(() -> CHISELED_RED_NETHER_BRICKS.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.RED_NETHER_BRICKS)));
    public static final RegistryObject<Block> CHISELED_PURPUR_BLOCK_WALL = BLOCKS.register("chiseled_purpur_block_wall", () -> new ModWallBlock(() -> CHISELED_PURPUR_BLOCK.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.PURPUR_BLOCK)));
    public static final RegistryObject<Block> CHISELED_OBSIDIAN_WALL = BLOCKS.register("chiseled_obsidian_wall", () -> new ModWallBlock(() -> CHISELED_OBSIDIAN.get().defaultBlockState(), BlockBehaviour.Properties.copy(Blocks.OBSIDIAN)));

    // Vanilla Walls
    public static final RegistryObject<Block> CRACKED_STONE_BRICK_WALL = BLOCKS.register("cracked_stone_brick_wall", () -> new ModWallBlock(Blocks.CRACKED_STONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_STONE_BRICK_WALL = BLOCKS.register("chiseled_stone_brick_wall", () -> new ModWallBlock(Blocks.CHISELED_STONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_SANDSTONE_WALL = BLOCKS.register("chiseled_sandstone_wall", () -> new ModWallBlock(Blocks.CHISELED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_RED_SANDSTONE_WALL = BLOCKS.register("chiseled_red_sandstone_wall", () -> new ModWallBlock(Blocks.CHISELED_RED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> IRON_BLOCK_WALL = BLOCKS.register("iron_block_wall", () -> new ModWallBlock(Blocks.IRON_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> GOLD_BLOCK_WALL = BLOCKS.register("gold_block_wall", () -> new ModWallBlock(Blocks.GOLD_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> OBSIDIAN_WALL = BLOCKS.register("obsidian_wall", () -> new ModWallBlock(Blocks.OBSIDIAN::defaultBlockState));
    public static final RegistryObject<Block> BEDROCK_WALL = BLOCKS.register("bedrock_wall", () -> new ModWallBlock(Blocks.BEDROCK::defaultBlockState));
    public static final RegistryObject<Block> NETHERRACK_WALL = BLOCKS.register("netherrack_wall", () -> new ModWallBlock(Blocks.NETHERRACK::defaultBlockState));
    public static final RegistryObject<Block> CRACKED_NETHER_BRICK_WALL = BLOCKS.register("cracked_nether_brick_wall", () -> new ModWallBlock(Blocks.CRACKED_NETHER_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_NETHER_BRICK_WALL = BLOCKS.register("chiseled_nether_brick_wall", () -> new ModWallBlock(Blocks.CHISELED_NETHER_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CRACKED_POLISHED_BLACKSTONE_BRICK_WALL = BLOCKS.register("cracked_polished_blackstone_brick_wall", () -> new ModWallBlock(Blocks.CRACKED_POLISHED_BLACKSTONE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_POLISHED_BLACKSTONE_WALL = BLOCKS.register("chiseled_polished_blackstone_wall", () -> new ModWallBlock(Blocks.CHISELED_POLISHED_BLACKSTONE::defaultBlockState));
    public static final RegistryObject<Block> END_STONE_WALL = BLOCKS.register("end_stone_wall", () -> new ModWallBlock(Blocks.END_STONE::defaultBlockState));
    public static final RegistryObject<Block> CHISELED_QUARTZ_BLOCK_WALL = BLOCKS.register("chiseled_quartz_block_wall", () -> new ModWallBlock(Blocks.CHISELED_QUARTZ_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> QUARTZ_BRICK_WALL = BLOCKS.register("quartz_brick_wall", () -> new ModWallBlock(Blocks.QUARTZ_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> TERRACOTTA_WALL = BLOCKS.register("terracotta_wall", () -> new ModWallBlock(Blocks.TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> WHITE_TERRACOTTA_WALL = BLOCKS.register("white_terracotta_wall", () -> new ModWallBlock(Blocks.WHITE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> ORANGE_TERRACOTTA_WALL = BLOCKS.register("orange_terracotta_wall", () -> new ModWallBlock(Blocks.ORANGE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> MAGENTA_TERRACOTTA_WALL = BLOCKS.register("magenta_terracotta_wall", () -> new ModWallBlock(Blocks.MAGENTA_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_BLUE_TERRACOTTA_WALL = BLOCKS.register("light_blue_terracotta_wall", () -> new ModWallBlock(Blocks.LIGHT_BLUE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> YELLOW_TERRACOTTA_WALL = BLOCKS.register("yellow_terracotta_wall", () -> new ModWallBlock(Blocks.YELLOW_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIME_TERRACOTTA_WALL = BLOCKS.register("lime_terracotta_wall", () -> new ModWallBlock(Blocks.LIME_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> PINK_TERRACOTTA_WALL = BLOCKS.register("pink_terracotta_wall", () -> new ModWallBlock(Blocks.PINK_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> GRAY_TERRACOTTA_WALL = BLOCKS.register("gray_terracotta_wall", () -> new ModWallBlock(Blocks.GRAY_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_GRAY_TERRACOTTA_WALL = BLOCKS.register("light_gray_terracotta_wall", () -> new ModWallBlock(Blocks.LIGHT_GRAY_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> CYAN_TERRACOTTA_WALL = BLOCKS.register("cyan_terracotta_wall", () -> new ModWallBlock(Blocks.CYAN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> PURPLE_TERRACOTTA_WALL = BLOCKS.register("purple_terracotta_wall", () -> new ModWallBlock(Blocks.PURPLE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BLUE_TERRACOTTA_WALL = BLOCKS.register("blue_terracotta_wall", () -> new ModWallBlock(Blocks.BLUE_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BROWN_TERRACOTTA_WALL = BLOCKS.register("brown_terracotta_wall", () -> new ModWallBlock(Blocks.BROWN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> GREEN_TERRACOTTA_WALL = BLOCKS.register("green_terracotta_wall", () -> new ModWallBlock(Blocks.GREEN_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> RED_TERRACOTTA_WALL = BLOCKS.register("red_terracotta_wall", () -> new ModWallBlock(Blocks.RED_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> BLACK_TERRACOTTA_WALL = BLOCKS.register("black_terracotta_wall", () -> new ModWallBlock(Blocks.BLACK_TERRACOTTA::defaultBlockState));
    public static final RegistryObject<Block> WHITE_CONCRETE_WALL = BLOCKS.register("white_concrete_wall", () -> new ModWallBlock(Blocks.WHITE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> ORANGE_CONCRETE_WALL = BLOCKS.register("orange_concrete_wall", () -> new ModWallBlock(Blocks.ORANGE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> MAGENTA_CONCRETE_WALL = BLOCKS.register("magenta_concrete_wall", () -> new ModWallBlock(Blocks.MAGENTA_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_BLUE_CONCRETE_WALL = BLOCKS.register("light_blue_concrete_wall", () -> new ModWallBlock(Blocks.LIGHT_BLUE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> YELLOW_CONCRETE_WALL = BLOCKS.register("yellow_concrete_wall", () -> new ModWallBlock(Blocks.YELLOW_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIME_CONCRETE_WALL = BLOCKS.register("lime_concrete_wall", () -> new ModWallBlock(Blocks.LIME_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> PINK_CONCRETE_WALL = BLOCKS.register("pink_concrete_wall", () -> new ModWallBlock(Blocks.PINK_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> GRAY_CONCRETE_WALL = BLOCKS.register("gray_concrete_wall", () -> new ModWallBlock(Blocks.GRAY_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> LIGHT_GRAY_CONCRETE_WALL = BLOCKS.register("light_gray_concrete_wall", () -> new ModWallBlock(Blocks.LIGHT_GRAY_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> CYAN_CONCRETE_WALL = BLOCKS.register("cyan_concrete_wall", () -> new ModWallBlock(Blocks.CYAN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> PURPLE_CONCRETE_WALL = BLOCKS.register("purple_concrete_wall", () -> new ModWallBlock(Blocks.PURPLE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BLUE_CONCRETE_WALL = BLOCKS.register("blue_concrete_wall", () -> new ModWallBlock(Blocks.BLUE_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BROWN_CONCRETE_WALL = BLOCKS.register("brown_concrete_wall", () -> new ModWallBlock(Blocks.BROWN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> GREEN_CONCRETE_WALL = BLOCKS.register("green_concrete_wall", () -> new ModWallBlock(Blocks.GREEN_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> RED_CONCRETE_WALL = BLOCKS.register("red_concrete_wall", () -> new ModWallBlock(Blocks.RED_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> BLACK_CONCRETE_WALL = BLOCKS.register("black_concrete_wall", () -> new ModWallBlock(Blocks.BLACK_CONCRETE::defaultBlockState));
    public static final RegistryObject<Block> CUT_SANDSTONE_WALL = BLOCKS.register("cut_sandstone_wall", () -> new ModWallBlock(Blocks.CUT_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> CUT_RED_SANDSTONE_WALL = BLOCKS.register("cut_red_sandstone_wall", () -> new ModWallBlock(Blocks.CUT_RED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> SMOOTH_STONE_WALL = BLOCKS.register("smooth_stone_wall", () -> new ModWallBlock(Blocks.SMOOTH_STONE::defaultBlockState));
    public static final RegistryObject<Block> STONE_WALL = BLOCKS.register("stone_wall", () -> new ModWallBlock(Blocks.STONE::defaultBlockState));
    public static final RegistryObject<Block> POLISHED_GRANITE_WALL = BLOCKS.register("polished_granite_wall", () -> new ModWallBlock(Blocks.POLISHED_GRANITE::defaultBlockState));
    public static final RegistryObject<Block> POLISHED_DIORITE_WALL = BLOCKS.register("polished_diorite_wall", () -> new ModWallBlock(Blocks.POLISHED_DIORITE::defaultBlockState));
    public static final RegistryObject<Block> POLISHED_ANDESITE_WALL = BLOCKS.register("polished_andesite_wall", () -> new ModWallBlock(Blocks.POLISHED_ANDESITE::defaultBlockState));
    public static final RegistryObject<Block> SMOOTH_SANDSTONE_WALL = BLOCKS.register("smooth_sandstone_wall", () -> new ModWallBlock(Blocks.SMOOTH_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> SMOOTH_RED_SANDSTONE_WALL = BLOCKS.register("smooth_red_sandstone_wall", () -> new ModWallBlock(Blocks.SMOOTH_RED_SANDSTONE::defaultBlockState));
    public static final RegistryObject<Block> PURPUR_BLOCK_WALL = BLOCKS.register("purpur_block_wall", () -> new ModWallBlock(Blocks.PURPUR_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> QUARTZ_BLOCK_WALL = BLOCKS.register("quartz_block_wall", () -> new ModWallBlock(Blocks.QUARTZ_BLOCK::defaultBlockState));
    public static final RegistryObject<Block> SMOOTH_QUARTZ_WALL = BLOCKS.register("smooth_quartz_wall", () -> new ModWallBlock(Blocks.SMOOTH_QUARTZ::defaultBlockState));
    public static final RegistryObject<Block> PRISMARINE_BRICK_WALL = BLOCKS.register("prismarine_brick_wall", () -> new ModWallBlock(Blocks.PRISMARINE_BRICKS::defaultBlockState));
    public static final RegistryObject<Block> DARK_PRISMARINE_WALL = BLOCKS.register("dark_prismarine_wall", () -> new ModWallBlock(Blocks.DARK_PRISMARINE::defaultBlockState));

    // Vanilla Fences
    public static final RegistryObject<Block> OAK_WOOD_FENCE = BLOCKS.register("oak_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE)));
    public static final RegistryObject<Block> SPRUCE_WOOD_FENCE = BLOCKS.register("spruce_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_FENCE)));
    public static final RegistryObject<Block> BIRCH_WOOD_FENCE = BLOCKS.register("birch_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_FENCE)));
    public static final RegistryObject<Block> JUNGLE_WOOD_FENCE = BLOCKS.register("jungle_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_FENCE)));
    public static final RegistryObject<Block> ACACIA_WOOD_FENCE = BLOCKS.register("acacia_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_FENCE)));
    public static final RegistryObject<Block> DARK_OAK_WOOD_FENCE = BLOCKS.register("dark_oak_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_FENCE)));
    public static final RegistryObject<Block> CRIMSON_HYPHAE_FENCE = BLOCKS.register("crimson_hyphae_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_FENCE).sound(SoundType.STEM)));
    public static final RegistryObject<Block> WARPED_HYPHAE_FENCE = BLOCKS.register("warped_hyphae_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_FENCE).sound(SoundType.STEM)));
    public static final RegistryObject<Block> STRIPPED_OAK_WOOD_FENCE = BLOCKS.register("stripped_oak_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE)));
    public static final RegistryObject<Block> STRIPPED_SPRUCE_WOOD_FENCE = BLOCKS.register("stripped_spruce_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_FENCE)));
    public static final RegistryObject<Block> STRIPPED_BIRCH_WOOD_FENCE = BLOCKS.register("stripped_birch_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_FENCE)));
    public static final RegistryObject<Block> STRIPPED_JUNGLE_WOOD_FENCE = BLOCKS.register("stripped_jungle_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_FENCE)));
    public static final RegistryObject<Block> STRIPPED_ACACIA_WOOD_FENCE = BLOCKS.register("stripped_acacia_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_FENCE)));
    public static final RegistryObject<Block> STRIPPED_DARK_OAK_WOOD_FENCE = BLOCKS.register("stripped_dark_oak_wood_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_FENCE)));
    public static final RegistryObject<Block> STRIPPED_CRIMSON_HYPHAE_FENCE = BLOCKS.register("stripped_crimson_hyphae_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_FENCE).sound(SoundType.STEM)));
    public static final RegistryObject<Block> STRIPPED_WARPED_HYPHAE_FENCE = BLOCKS.register("stripped_warped_hyphae_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_FENCE).sound(SoundType.STEM)));
    public static final RegistryObject<Block> RED_NETHER_BRICK_FENCE = BLOCKS.register("red_nether_brick_fence", () -> new FenceBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_BRICK_FENCE)));
    public static final RegistryObject<Block> OAK_WOOD_FENCE_GATE = BLOCKS.register("oak_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> SPRUCE_WOOD_FENCE_GATE = BLOCKS.register("spruce_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> BIRCH_WOOD_FENCE_GATE = BLOCKS.register("birch_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> JUNGLE_WOOD_FENCE_GATE = BLOCKS.register("jungle_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> ACACIA_WOOD_FENCE_GATE = BLOCKS.register("acacia_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> DARK_OAK_WOOD_FENCE_GATE = BLOCKS.register("dark_oak_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> CRIMSON_HYPHAE_FENCE_GATE = BLOCKS.register("crimson_hyphae_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_FENCE).sound(SoundType.STEM), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static final RegistryObject<Block> WARPED_HYPHAE_FENCE_GATE = BLOCKS.register("warped_hyphae_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_FENCE).sound(SoundType.STEM), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_OAK_WOOD_FENCE_GATE = BLOCKS.register("stripped_oak_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.OAK_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_SPRUCE_WOOD_FENCE_GATE = BLOCKS.register("stripped_spruce_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.SPRUCE_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_BIRCH_WOOD_FENCE_GATE = BLOCKS.register("stripped_birch_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.BIRCH_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_JUNGLE_WOOD_FENCE_GATE = BLOCKS.register("stripped_jungle_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.JUNGLE_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_ACACIA_WOOD_FENCE_GATE = BLOCKS.register("stripped_acacia_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.ACACIA_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_DARK_OAK_WOOD_FENCE_GATE = BLOCKS.register("stripped_dark_oak_wood_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.DARK_OAK_FENCE), SoundEvents.FENCE_GATE_CLOSE, SoundEvents.FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_CRIMSON_HYPHAE_FENCE_GATE = BLOCKS.register("stripped_crimson_hyphae_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.CRIMSON_FENCE).sound(SoundType.STEM), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static final RegistryObject<Block> STRIPPED_WARPED_HYPHAE_FENCE_GATE = BLOCKS.register("stripped_warped_hyphae_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.WARPED_FENCE).sound(SoundType.STEM), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static final RegistryObject<Block> NETHER_BRICK_FENCE_GATE = BLOCKS.register("nether_brick_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_BRICK_FENCE), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
    public static final RegistryObject<Block> RED_NETHER_BRICK_FENCE_GATE = BLOCKS.register("red_nether_brick_fence_gate", () -> new FenceGateBlock(BlockBehaviour.Properties.copy(Blocks.NETHER_BRICK_FENCE), SoundEvents.NETHER_WOOD_FENCE_GATE_CLOSE, SoundEvents.NETHER_WOOD_FENCE_GATE_OPEN));
}
